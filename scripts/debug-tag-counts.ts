import { supabase } from '@/lib/supabase'

async function debugTagCounts() {
  console.log('🔍 タグカウント詳細デバッグ...\n')
  
  // 1. 全タグデータ取得（UIと同じクエリ）
  const { data: allTags, error: tagsError } = await supabase
    .from('article_tags')
    .select('tag_name, category, confidence_score, is_auto_generated')
  
  if (tagsError) {
    console.error('❌ タグ取得エラー:', tagsError)
    return
  }

  console.log('📊 生データ統計:')
  console.log('   総タグレコード数:', allTags?.length || 0)
  
  if (!allTags || allTags.length === 0) {
    console.log('❌ タグデータなし')
    return
  }

  // 2. タグごとに集計（UIと同じロジック）
  const tagStats: { [key: string]: any } = {}
  
  allTags.forEach(tag => {
    if (!tagStats[tag.tag_name]) {
      tagStats[tag.tag_name] = {
        tag_name: tag.tag_name,
        total_usage: 0,
        is_auto_generated: tag.is_auto_generated,
        category: tag.category,
        avg_confidence: 0
      }
    }
    
    tagStats[tag.tag_name].total_usage++
    tagStats[tag.tag_name].avg_confidence += tag.confidence_score
  })

  // 3. 平均信頼度を算出し、配列に変換
  const summaries = Object.values(tagStats).map((stat: any) => ({
    ...stat,
    avg_confidence: stat.avg_confidence / stat.total_usage
  }))

  // 4. ソート（UIと同じ）
  summaries.sort((a: any, b: any) => {
    if (a.is_auto_generated !== b.is_auto_generated) {
      return a.is_auto_generated ? 1 : -1 // 事前定義を上位に
    }
    return b.total_usage - a.total_usage // 使用頻度順
  })

  console.log('📋 集計結果:')
  console.log('   総ユニークタグ数:', summaries.length)
  
  const predefinedCount = summaries.filter((s: any) => !s.is_auto_generated).length
  const autoCount = summaries.filter((s: any) => s.is_auto_generated).length
  
  console.log('   📌 事前定義タグ種類:', predefinedCount)
  console.log('   🔄 自動生成タグ種類:', autoCount)
  
  console.log('\n🏷️ 事前定義タグ詳細:')
  summaries
    .filter((s: any) => !s.is_auto_generated)
    .forEach((tag: any, index) => {
      console.log(`   ${index + 1}. ${tag.tag_name} (使用${tag.total_usage}回, 信頼度${(tag.avg_confidence * 100).toFixed(0)}%)`)
    })
  
  console.log('\n🔄 自動生成タグ Top 10:')
  summaries
    .filter((s: any) => s.is_auto_generated)
    .slice(0, 10)
    .forEach((tag: any, index) => {
      console.log(`   ${index + 1}. ${tag.tag_name} (使用${tag.total_usage}回, 信頼度${(tag.avg_confidence * 100).toFixed(0)}%)`)
    })
    
  // 5. 総タグ使用数計算
  const totalUsage = summaries.reduce((sum, tag: any) => sum + tag.total_usage, 0)
  console.log('\n📊 総使用回数:', totalUsage)
  
  // 6. データの整合性チェック
  console.log('\n🧮 整合性チェック:')
  console.log(`   生データ件数 (${allTags.length}) === 総使用回数 (${totalUsage}):`, allTags.length === totalUsage ? '✅' : '❌')
  console.log(`   事前定義 + 自動生成 (${predefinedCount + autoCount}) === 総ユニーク (${summaries.length}):`, (predefinedCount + autoCount) === summaries.length ? '✅' : '❌')
  
  // 7. ブラウザに表示される数値と比較
  console.log('\n🌐 ブラウザ表示との比較:')
  console.log(`   📌 事前定義タグ: DB${predefinedCount} vs 表示5 → ${predefinedCount === 5 ? '✅' : '❌不一致'}`)
  console.log(`   🔄 自動生成タグ: DB${autoCount} vs 表示224 → ${autoCount === 224 ? '✅' : '❌不一致'}`)
  
  // 8. 可能性のある原因調査
  if (predefinedCount !== 5 || autoCount !== 224) {
    console.log('\n🔎 不一致の原因調査:')
    
    // null/undefined値のチェック
    const nullAutoGenerated = allTags.filter(t => t.is_auto_generated === null || t.is_auto_generated === undefined)
    console.log(`   null/undefined is_auto_generated: ${nullAutoGenerated.length}件`)
    
    if (nullAutoGenerated.length > 0) {
      console.log('   サンプル:', nullAutoGenerated.slice(0, 3).map(t => t.tag_name))
    }
    
    // 重複チェック
    const duplicates = allTags.filter((tag, index, arr) => 
      arr.findIndex(t => t.tag_name === tag.tag_name && t.is_auto_generated === tag.is_auto_generated) !== index
    )
    console.log(`   重複タグ: ${duplicates.length}件`)
  }
}

// 実行
debugTagCounts().catch(console.error)