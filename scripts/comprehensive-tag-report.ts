import { config } from 'dotenv';
import { supabase } from '../lib/supabase';
import { writeFileSync } from 'fs';
import { join } from 'path';

// 環境変数の読み込み
config({ path: '.env.local' });

interface TagAnalysis {
  tag_name: string;
  category: string;
  usage_count: number;
  confidence_avg: number;
  is_auto_generated: boolean;
  first_used: string;
  last_used: string;
  sample_articles: Array<{
    title: string;
    source_name: string;
    confidence_score: number;
  }>;
}

async function generateComprehensiveTagReport() {
  console.log('🔍 包括的タグ分析レポートを生成中...\n');

  try {
    // 1. 全タグ使用状況の取得（事前定義 + 自動生成）
    console.log('📊 タグ使用状況を分析中...');
    
    const { data: tagUsageData, error: tagError } = await supabase
      .from('article_tags')
      .select(`
        tag_name,
        category,
        is_auto_generated,
        confidence_score,
        created_at,
        news_articles!inner (
          title,
          source_name
        )
      `)
      .order('created_at', { ascending: false });

    if (tagError) {
      console.error('❌ タグデータ取得エラー:', tagError);
      return;
    }

    // 2. 事前定義タグマスターの取得
    const { data: masterTags, error: masterError } = await supabase
      .from('tag_master')
      .select('tag_name, category, base_reliability')
      .order('base_reliability', { ascending: false });

    if (masterError) {
      console.error('❌ タグマスター取得エラー:', masterError);
      return;
    }

    console.log(`   取得完了: ${tagUsageData?.length || 0} 件のタグ使用履歴`);
    console.log(`   事前定義タグ: ${masterTags?.length || 0} 件\n`);

    // 3. タグ別統計の計算
    const tagStats: { [key: string]: TagAnalysis } = {};
    
    tagUsageData?.forEach(usage => {
      const key = `${usage.tag_name}_${usage.category}_${usage.is_auto_generated}`;
      
      if (!tagStats[key]) {
        tagStats[key] = {
          tag_name: usage.tag_name,
          category: usage.category,
          usage_count: 0,
          confidence_avg: 0,
          is_auto_generated: usage.is_auto_generated,
          first_used: usage.created_at,
          last_used: usage.created_at,
          sample_articles: []
        };
      }
      
      const stats = tagStats[key];
      stats.usage_count++;
      stats.confidence_avg = (stats.confidence_avg * (stats.usage_count - 1) + usage.confidence_score) / stats.usage_count;
      
      if (usage.created_at < stats.first_used) stats.first_used = usage.created_at;
      if (usage.created_at > stats.last_used) stats.last_used = usage.created_at;
      
      if (stats.sample_articles.length < 3) {
        stats.sample_articles.push({
          title: usage.news_articles.title,
          source_name: usage.news_articles.source_name,
          confidence_score: usage.confidence_score
        });
      }
    });

    const analysisResults = Object.values(tagStats);
    
    // 4. 記事統計の取得
    const { data: articleStats, error: articleError } = await supabase
      .from('news_articles')
      .select('id, title, ai_summary, importance_score, created_at')
      .order('created_at', { ascending: false });

    if (articleError) {
      console.error('❌ 記事統計取得エラー:', articleError);
      return;
    }

    // 5. レポート生成
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
    const reportPath = join(process.cwd(), 'reports', `comprehensive-tag-report-${timestamp}.md`);
    
    const report = generateReportMarkdown(analysisResults, masterTags || [], articleStats || []);
    
    // 6. ファイル出力
    writeFileSync(reportPath, report, 'utf8');
    console.log(`✅ レポートを生成しました: ${reportPath}\n`);
    
    // 7. コンソールサマリー
    printConsoleSummary(analysisResults, masterTags || [], articleStats || []);
    
  } catch (error) {
    console.error('❌ レポート生成エラー:', error);
  }
}

function generateReportMarkdown(
  tagAnalyses: TagAnalysis[],
  masterTags: any[],
  articles: any[]
): string {
  const timestamp = new Date().toLocaleString('ja-JP');
  const aiAnalyzedCount = articles.filter(a => a.ai_summary).length;
  
  // 使用頻度でソート
  const sortedTags = tagAnalyses.sort((a, b) => b.usage_count - a.usage_count);
  const predefinedUsed = sortedTags.filter(t => !t.is_auto_generated);
  const autoGenerated = sortedTags.filter(t => t.is_auto_generated);
  
  // カテゴリ別統計
  const categoryStats: { [key: string]: number } = {};
  sortedTags.forEach(tag => {
    categoryStats[tag.category] = (categoryStats[tag.category] || 0) + tag.usage_count;
  });

  return `# 包括的タグ分析レポート

**生成日時**: ${timestamp}  
**分析対象**: 事前定義タグ + 自動生成タグ

## 📊 全体統計

| 項目 | 数値 |
|------|------|
| 総記事数 | ${articles.length} 件 |
| AI分析済記事 | ${aiAnalyzedCount} 件 |
| 事前定義タグ数 | ${masterTags.length} 件 |
| 使用中の事前定義タグ | ${predefinedUsed.length} 件 |
| 自動生成タグ数 | ${autoGenerated.length} 件 |
| 総タグ使用回数 | ${sortedTags.reduce((sum, t) => sum + t.usage_count, 0)} 回 |

## 🏷️ カテゴリ別使用状況

| カテゴリ | 使用回数 | 割合 |
|----------|----------|------|
${Object.entries(categoryStats)
  .sort((a, b) => b[1] - a[1])
  .map(([category, count]) => {
    const percentage = ((count / sortedTags.reduce((sum, t) => sum + t.usage_count, 0)) * 100).toFixed(1);
    return `| ${category} | ${count} 回 | ${percentage}% |`;
  })
  .join('\n')}

## 🏆 使用頻度TOP10（全タグ）

| 順位 | タグ名 | カテゴリ | 使用回数 | 平均信頼度 | タイプ |
|------|--------|----------|----------|------------|--------|
${sortedTags.slice(0, 10).map((tag, index) => {
  const type = tag.is_auto_generated ? '🔄自動生成' : '📌事前定義';
  return `| ${index + 1} | ${tag.tag_name} | ${tag.category} | ${tag.usage_count} | ${tag.confidence_avg.toFixed(2)} | ${type} |`;
}).join('\n')}

## 📌 事前定義タグの使用状況

### 使用中の事前定義タグ (${predefinedUsed.length}件)

${predefinedUsed.length > 0 ? predefinedUsed.map(tag => `
#### ${tag.tag_name} (${tag.category})
- **使用回数**: ${tag.usage_count} 回
- **平均信頼度**: ${tag.confidence_avg.toFixed(2)}
- **初回使用**: ${new Date(tag.first_used).toLocaleDateString('ja-JP')}
- **最終使用**: ${new Date(tag.last_used).toLocaleDateString('ja-JP')}
- **サンプル記事**:
${tag.sample_articles.map(article => `  - "${article.title.substring(0, 50)}..." (${article.source_name}, 信頼度: ${article.confidence_score})`).join('\n')}
`).join('\n') : '使用中の事前定義タグはありません。'}

### 未使用の事前定義タグ

${masterTags.filter(master => !predefinedUsed.some(used => used.tag_name === master.tag_name)).map(tag => 
  `- ${tag.tag_name} (${tag.category}, 基本信頼度: ${tag.base_reliability})`
).join('\n')}

## 🔄 自動生成タグ (${autoGenerated.length}件)

${autoGenerated.length > 0 ? autoGenerated.map(tag => `
#### ${tag.tag_name} (${tag.category})
- **使用回数**: ${tag.usage_count} 回
- **平均信頼度**: ${tag.confidence_avg.toFixed(2)}
- **初回生成**: ${new Date(tag.first_used).toLocaleDateString('ja-JP')}
- **最終使用**: ${new Date(tag.last_used).toLocaleDateString('ja-JP')}
- **サンプル記事**:
${tag.sample_articles.map(article => `  - "${article.title.substring(0, 50)}..." (${article.source_name}, 信頼度: ${article.confidence_score})`).join('\n')}
`).join('\n') : '自動生成タグはありません。'}

## 💡 推奨事項

### 高価値自動生成タグ（事前定義候補）
${autoGenerated.filter(tag => tag.usage_count >= 2 && tag.confidence_avg >= 0.8).map(tag => 
  `- **${tag.tag_name}** (${tag.category}): ${tag.usage_count}回使用, 平均信頼度${tag.confidence_avg.toFixed(2)}`
).join('\n') || '該当なし'}

### 活用度の低い事前定義タグ
${masterTags.filter(master => {
  const used = predefinedUsed.find(u => u.tag_name === master.tag_name);
  return !used || used.usage_count <= 1;
}).slice(0, 5).map(tag => `- ${tag.tag_name} (${tag.category})`).join('\n')}

---
*このレポートは Gemini 2.5 Flash によって自動生成されたタグ分析結果です*
`;
}

function printConsoleSummary(
  tagAnalyses: TagAnalysis[],
  masterTags: any[],
  articles: any[]
) {
  const sortedTags = tagAnalyses.sort((a, b) => b.usage_count - a.usage_count);
  const predefinedUsed = sortedTags.filter(t => !t.is_auto_generated);
  const autoGenerated = sortedTags.filter(t => t.is_auto_generated);
  const aiAnalyzedCount = articles.filter(a => a.ai_summary).length;
  
  console.log('🎉 ===== 包括的タグ分析サマリー =====');
  console.log(`📊 総記事数: ${articles.length} (AI分析済み: ${aiAnalyzedCount})`);
  console.log(`📌 事前定義タグ: ${masterTags.length} 個中 ${predefinedUsed.length} 個使用中`);
  console.log(`🔄 自動生成タグ: ${autoGenerated.length} 個`);
  console.log(`💯 総タグ使用回数: ${sortedTags.reduce((sum, t) => sum + t.usage_count, 0)} 回\n`);
  
  console.log('🏆 TOP10 使用頻度ランキング:');
  sortedTags.slice(0, 10).forEach((tag, index) => {
    const type = tag.is_auto_generated ? '🔄' : '📌';
    console.log(`${index + 1}. ${type} ${tag.tag_name} (${tag.usage_count}回, 信頼度: ${tag.confidence_avg.toFixed(2)})`);
  });
  
  if (autoGenerated.length > 0) {
    console.log('\n💡 注目の自動生成タグ:');
    autoGenerated.filter(t => t.usage_count >= 2).slice(0, 5).forEach(tag => {
      console.log(`   🔸 ${tag.tag_name}: ${tag.usage_count}回使用 (信頼度: ${tag.confidence_avg.toFixed(2)})`);
    });
  }
}

// 直接実行時
if (require.main === module) {
  generateComprehensiveTagReport()
    .then(() => {
      console.log('\n✅ 包括的タグ分析完了');
      process.exit(0);
    })
    .catch(error => {
      console.error('❌ 分析エラー:', error);
      process.exit(1);
    });
}

export { generateComprehensiveTagReport };