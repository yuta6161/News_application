import { supabase } from '@/lib/supabase'

async function analyzeTagCoverage() {
  console.log('🔍 記事タグカバレッジ分析開始...\n')
  
  try {
    // 1. 全記事数の取得
    const { data: allArticles, error: allError } = await supabase
      .from('news_articles')
      .select('id, title, category, source_name, created_at')
      .order('created_at', { ascending: false })
    
    if (allError) {
      console.error('❌ 全記事取得エラー:', allError)
      return
    }
    
    console.log(`📊 全記事数: ${allArticles?.length || 0}件`)
    
    // 2. タグ付き記事数の取得
    const { data: taggedArticles, error: taggedError } = await supabase
      .from('news_articles')
      .select(`
        id, 
        title, 
        category,
        source_name,
        created_at,
        article_tags(
          tag_name,
          confidence_score,
          is_auto_generated
        )
      `)
      .not('article_tags', 'is', null)
      .order('created_at', { ascending: false })
    
    if (taggedError) {
      console.error('❌ タグ付き記事取得エラー:', taggedError)
      return
    }
    
    console.log(`📊 タグ付き記事数: ${taggedArticles?.length || 0}件`)
    
    // 3. タグなし記事の特定
    const taggedArticleIds = new Set(taggedArticles?.map(a => a.id) || [])
    const untaggedArticles = allArticles?.filter(article => 
      !taggedArticleIds.has(article.id)
    ) || []
    
    console.log(`📊 タグなし記事数: ${untaggedArticles.length}件`)
    console.log(`📊 タグカバレッジ: ${Math.round((taggedArticles?.length || 0) / (allArticles?.length || 1) * 100)}%\n`)
    
    // 4. カテゴリ別分析
    console.log('📋 カテゴリ別タグカバレッジ:')
    const categoryStats: { [key: string]: { total: number, tagged: number } } = {}
    
    // 全記事をカテゴリ別に集計
    allArticles?.forEach(article => {
      if (!categoryStats[article.category]) {
        categoryStats[article.category] = { total: 0, tagged: 0 }
      }
      categoryStats[article.category].total++
    })
    
    // タグ付き記事をカテゴリ別に集計
    taggedArticles?.forEach(article => {
      if (categoryStats[article.category]) {
        categoryStats[article.category].tagged++
      }
    })
    
    Object.entries(categoryStats).forEach(([category, stats]) => {
      const coverage = Math.round(stats.tagged / stats.total * 100)
      console.log(`   ${category}: ${stats.tagged}/${stats.total} (${coverage}%)`)
    })
    
    // 5. ソース別分析
    console.log('\n📋 ソース別タグカバレッジ:')
    const sourceStats: { [key: string]: { total: number, tagged: number } } = {}
    
    // 全記事をソース別に集計
    allArticles?.forEach(article => {
      if (!sourceStats[article.source_name]) {
        sourceStats[article.source_name] = { total: 0, tagged: 0 }
      }
      sourceStats[article.source_name].total++
    })
    
    // タグ付き記事をソース別に集計
    taggedArticles?.forEach(article => {
      if (sourceStats[article.source_name]) {
        sourceStats[article.source_name].tagged++
      }
    })
    
    Object.entries(sourceStats)
      .sort((a, b) => b[1].total - a[1].total)
      .forEach(([source, stats]) => {
        const coverage = Math.round(stats.tagged / stats.total * 100)
        console.log(`   ${source}: ${stats.tagged}/${stats.total} (${coverage}%)`)
      })
    
    // 6. タグなし記事の詳細（最新10件）
    if (untaggedArticles.length > 0) {
      console.log('\n❌ タグなし記事（最新10件）:')
      untaggedArticles.slice(0, 10).forEach((article, index) => {
        console.log(`   ${index + 1}. [${article.category}] ${article.title}`)
        console.log(`      ソース: ${article.source_name} | 作成: ${new Date(article.created_at).toLocaleDateString()}`)
      })
    }
    
    // 7. タグ統計
    console.log('\n🏷️ タグ統計:')
    const { data: tagStats, error: tagStatsError } = await supabase
      .from('article_tags')
      .select('tag_name, is_auto_generated')
    
    if (!tagStatsError && tagStats) {
      const autoGenerated = tagStats.filter(t => t.is_auto_generated).length
      const predefined = tagStats.filter(t => !t.is_auto_generated).length
      console.log(`   総タグ数: ${tagStats.length}個`)
      console.log(`   自動生成: ${autoGenerated}個`)
      console.log(`   事前定義: ${predefined}個`)
    }
    
    // 8. 推奨アクション
    console.log('\n💡 推奨アクション:')
    if (untaggedArticles.length > 0) {
      console.log(`   ❗ ${untaggedArticles.length}件の記事にタグ付けが必要です`)
      console.log('   🔧 遡及AI分析の実行を推奨します')
      console.log('   📝 コマンド: npx tsx scripts/retroactive-tag-articles.ts')
    }
    
    if ((taggedArticles?.length || 0) / (allArticles?.length || 1) < 0.8) {
      console.log('   ⚠️ タグカバレッジが80%未満です')
      console.log('   🔧 AI分析システムの改善が必要です')
    }
    
  } catch (error) {
    console.error('❌ 分析エラー:', error)
  }
}

// 実行
analyzeTagCoverage()